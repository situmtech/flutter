# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none


variables:
  - group: Passwords
  - group: SoftwareVersions

parameters:
  - name: flutterVersion
    displayName: Set Flutter plugin Version
    type: string
    default: "0.0.0"

resources:
  repositories:
    - repository: sys_kubernetes_templates
      type: bitbucket
      endpoint: Bitbucket - sistemas
      name: situm/sys-kubernetes-templates.git

pool:
  vmImage: $(ubuntuVersion)

steps:
  - checkout: self
    fetchTags: false
    fetchDepth: 1
    path: flutter-wayfinding
    displayName: Checkout self

  - bash: |

      if [[ "${{ parameters.flutterVersion }}" == "0.0.0" ]];then
        echo -e "\n[!] IMPORTANT: You don't set the plugin version when you run the release branch and I'm not fortune teller\n"
        exit 1

      fi

      echo "##vso[task.setvariable variable=version]$(echo ${{ parameters.flutterVersion }})"
      currentBranch=$(echo $(Build.SourceBranch) | cut -d "/" -f 3,4)
      echo "##vso[task.setvariable variable=currentBranch]$(echo $currentBranch)"
      echo -e "\n[+] Defined versions:"
      echo -e "\t[+] Flutter Plugin version: ${{ parameters.flutterVersion }}"
      echo -e "\t[+] Current branch: $currentBranch"

      echo -e "\n[+] Setting git to push NPM version\n"
      git config --global user.email "sistemas@situm.es"
      git config --global user.name "Situmops"

        
      echo -e "\n[+] Setting git remote credentials\n"
      git remote set-url origin https://situmops:$(github_token)@github.com/$(Build.Repository.Name).git
      cat .git/config

    displayName: Initial Vars & Configs

  - bash: |

      mkdir $(Agent.BuildDirectory)/binaries
      cd $(Agent.BuildDirectory)/binaries
      echo -e "\n[+] Download Flutter version $(flutterLinuxVersion)\n"

      wget -q $(flutterLinuxVersion)

      echo -e "\n[+] Untar Flutter version\n"
      find . -iname "*.tar.xz" -exec tar xf {} \;

      echo -e "\n[+] Download gcloud cli version $(gcloudCliVersion)\n"
      curl -O $(gcloudCliVersion)

      echo -e "\n[+] Untar gcloud Cli version\n"
      find . -iname  "*.tar.gz" -exec tar xzf {} \;

    displayName: Install Binaries

  - bash: |

      #Export binary paths
      export PATH="$PATH:$(Agent.BuildDirectory)/binaries/flutter/bin"
      export PATH="$PATH:$(Agent.BuildDirectory)/binaries/google-cloud-sdk/bin"

      echo -e "\n[+] Fetch all branches\n"
      git fetch

      echo -e "\n[+] Checkout to $(currentBranch)\n"

      git checkout $(currentBranch)

      echo -e "\n[+] Change version in pubspec.yaml\n"
      sed "s/^version:\s[0-9].*$/version: $(version)/g" -i pubspec.yaml  
      echo -e "\n[+] Change version in situm_flutter_wayfinding.podspec"
      sed "s/s.version\s.*= '[0-9\.].*'$/s.version          = '$(version)'/g" -i ios/situm_flutter_wayfinding.podspec
      echo -e "\n[+] Set new plugin version in examples"
      cd example
      flutter pub get
      
      echo -e "\n[+] Add,commit and push changes to $(currentBranch)"
      git commit -am "Setting plugin Version to $(version)"

      git push --set-upstream origin $(currentBranch)
      git push

    displayName: Set version

  - template: azure-templates/publish_release.yml@sys_kubernetes_templates
    parameters:
      bitbucket:
        bitbucket_user: situmops
      system: "N/A"
      server: "github"
      mergeBranches:
        - "master-test"
        - "develop-test"


  - task: DownloadSecureFile@1
    name: key_file
    inputs:
      secureFile: key-file.json

  - bash: |
      
      cp $(key_file.secureFilePath) .
      
      export PATH="$PATH:$(Agent.BuildDirectory)/binaries/flutter/bin"
      export PATH="$PATH:$(Agent.BuildDirectory)/binaries/google-cloud-sdk/bin"

      echo -e "\n[+] Login with using key-file.json\n"
      gcloud auth activate-service-account --key-file=key-file.json

      rm -rf key-file.json

      echo -e "\n[+] Create temporary token \n"
      gcloud auth print-identity-token --audiences=https://pub.dev | dart pub token add https://pub.dev

      echo -e "\n[+] Publish flutter package\n"
      dart pub publish --dry-run

    displayName: Publish packages
